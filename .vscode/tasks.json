// Available variables which can be used inside of strings.
// ${workspaceRoot}: the root folder of the team
// ${file}: the current opened file
// ${fileBasename}: the current opened file's basename
// ${fileDirname}: the current opened file's dirname
// ${fileExtname}: the current opened file's extension
// ${cwd}: the current working directory of the spawned process
// A task runner that calls a custom npm script that compiles the extension.
{
	"version": "2.0.0",
	"tasks": [
		{
			"type": "shell",
			// in package.json we have a compile task for each example
			"command": "npm run compile-completions",
			"label": "compile-completions",
			// show the output window only if unrecognized errors occur.
			"presentation": {
				"reveal": "silent"
			},
			// The tsc compiler is started in watching mode
			"isBackground": true,
			// use the standard tsc in watch mode problem matcher to find compile problems in the output.
			"problemMatcher": "$tsc-watch"
		},
		{
			"type": "shell",
			// in package.json we have a compile task for each example
			"command": "npm run compile-decorator",
			"label": "compile-decorator",
			// show the output window only if unrecognized errors occur.
			"presentation": {
				"reveal": "silent"
			},
			// The tsc compiler is started in watching mode
			"isBackground": true,
			// use the standard tsc in watch mode problem matcher to find compile problems in the output.
			"problemMatcher": "$tsc-watch"
		},
		{
			"type": "shell",
			// in package.json we have a compile task for each example
			"command": "npm run compile-previewhtml",
			"label": "compile-previewhtml",
			// show the output window only if unrecognized errors occur.
			"presentation": {
				"reveal": "silent"
			},
			// The tsc compiler is started in watching mode
			"isBackground": true,
			// use the standard tsc in watch mode problem matcher to find compile problems in the output.
			"problemMatcher": "$tsc-watch"
		},
		{
			"type": "shell",
			// in package.json we have a compile task for each example
			"command": "npm run compile-statusbar",
			"label": "compile-statusbar",
			// show the output window only if unrecognized errors occur.
			"presentation": {
				"reveal": "silent"
			},
			// The tsc compiler is started in watching mode
			"isBackground": true,
			// use the standard tsc in watch mode problem matcher to find compile problems in the output.
			"problemMatcher": "$tsc-watch"
		},
		{
			"type": "shell",
			// in package.json we have a compile task for each example
			"command": "npm run compile-contentprovider",
			"label": "compile-contentprovider",
			// show the output window only if unrecognized errors occur.
			"presentation": {
				"reveal": "silent"
			},
			// The tsc compiler is started in watching mode
			"isBackground": true,
			// use the standard tsc in watch mode problem matcher to find compile problems in the output.
			"problemMatcher": "$tsc-watch"
		},
		{
			"type": "shell",
			// in package.json we have a compile task for each example
			"command": "npm run compile-languageprovider",
			"label": "compile-languageprovider",
			// show the output window only if unrecognized errors occur.
			"presentation": {
				"reveal": "silent"
			},
			// The tsc compiler is started in watching mode
			"isBackground": true,
			// use the standard tsc in watch mode problem matcher to find compile problems in the output.
			"problemMatcher": "$tsc-watch"
		}
	]
}